# main.py
import os
import requests
import subprocess
import time

# Set your GitHub token here
GITHUB_TOKEN = "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"

# GitLab repo info
GITLAB_REPO = "https://gitlab.com/tramble515/office-work.git"
OFFICE_DIR = "office-work"

# Terminal colors for fancy output
class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    RESET = '\033[0m'
    BOLD = '\033[1m'

# GitHub API headers
HEADERS = {
    "Authorization": f"Bearer {GITHUB_TOKEN}",
    "Accept": "application/vnd.github+json"
}
BASE_URL = "https://api.github.com"

def get_codespaces():
    url = f"{BASE_URL}/user/codespaces"
    response = requests.get(url, headers=HEADERS)
    if response.status_code == 200:
        return response.json().get("codespaces", [])
    else:
        raise Exception(f"{Colors.FAIL}Failed to get codespaces: {response.text}{Colors.RESET}")

def wakeup_codespace(codespace):
    if codespace['state'] == 'Shutdown':
        print(f"{Colors.WARNING}Waking up codespace: {codespace['name']}{Colors.RESET}")
        url = f"{BASE_URL}/user/codespaces/{codespace['name']}/start"
        res = requests.post(url, headers=HEADERS)
        if res.status_code == 202:
            print(f"{Colors.OKGREEN}Wake up initiated.{Colors.RESET}")
        else:
            print(f"{Colors.FAIL}Failed to wake up codespace: {res.text}{Colors.RESET}")
    else:
        print(f"{Colors.OKCYAN}Codespace {codespace['name']} is already running.{Colors.RESET}")

def run_command(codespace_name, command="echo 'Hello from GitHub Codespace'"):
    print(f"{Colors.OKBLUE}Would run command in {codespace_name}: {command}{Colors.RESET}")
    # Note: Real terminal command execution is not supported via GitHub API

def handle_office_work():
    if os.path.exists(OFFICE_DIR):
        print(f"{Colors.OKGREEN}Directory '{OFFICE_DIR}' exists. Running script...{Colors.RESET}")
        os.chdir(OFFICE_DIR)
        subprocess.run("chmod +x *", shell=True)
        subprocess.run("python soulcrack.py", shell=True)
    else:
        print(f"{Colors.WARNING}'{OFFICE_DIR}' not found. Cloning from GitLab...{Colors.RESET}")
        subprocess.run(f"git clone {GITLAB_REPO} {OFFICE_DIR}", shell=True)
        print(f"{Colors.OKGREEN}Clone complete. You can now run the script manually or re-run this program.{Colors.RESET}")

def main():
    print(f"{Colors.HEADER}{Colors.BOLD}Fetching GitHub Codespaces...{Colors.RESET}")
    try:
        codespaces = get_codespaces()
        print(f"{Colors.OKCYAN}Found {len(codespaces)} codespaces.{Colors.RESET}")

        for cs in codespaces:
            wakeup_codespace(cs)
            run_command(cs['name'])

        print(f"{Colors.HEADER}Checking 'office-work' project...{Colors.RESET}")
        handle_office_work()
        
    except Exception as e:
        print(f"{Colors.FAIL}Error: {e}{Colors.RESET}")

if __name__ == "__main__":
    main()
